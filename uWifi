#! /bin/bash

uWifiVersion="1.0.0"

# Base path hold both Templates and Messages folders
# Depending of the distro it might be redefined
basePath="/home/http/dev/uWifi"

# Store all messages translated in available languages
langPath="Messages"

# Store all configuration files templates in available languages
templatesPath="Templates"

# Store language filename/suffix based on current locale
langFileName=$(echo $LANG | cut -f 1 -d '.' | cut -f 1 -d '_')

function abort {
  echo "uWifi: $1"
  exit $2
}

###########################################################
# LANGUAGE SETTING ########################################
###########################################################

if [ -f "$basePath/$langPath/$langFileName" ]
then
  source "$basePath/$langPath/$langFileName"
else
  source "$basePath/$langPath/en"
fi


###########################################################
# CHECK IF COMMANDS EXIST #################################
###########################################################

function checkIfCommandsExist {
  wpa_supplicant -v >/dev/null 2>&1 || abort "$uWifi_wpaSupplicantIsntInstalled" 255
  dhcpcd --version >/dev/null 2>&1 || abort "$uWifi_dhcpcdIsntInstalled" 255
  iw --version >/dev/null 2>&1 || abort "$uWifi_iwIsntInstalled" 255
  ip -V >/dev/null 2>&1 || abort "$uWifi_ipIsntInstalled" 255
  who --version -V >/dev/null 2>&1 || abort "$uWifi_whoIsntInstalled" 255
}

###########################################################
# AVOID ARP POISONING #####################################
###########################################################

function avoidArpPoisoning {
  parser='$2 != "0.0.0.0" && $2 != "127.0.0.1" {gateway=$2} END {printf "%s",gateway}'
  gatewayIp=$(route -n | tail -n +3 | awk "$parser")

  if [[ "$gatewayIp" != "" ]]
  then
    echo "GATEWAY IP:	$gatewayIp"
    gatewayMac=$(nmap -sP "$gatewayIp" | grep "MAC Add" | cut -d ' ' -f 3)
    if [[ "$gatewayMac" == "" ]]
    then
      echo $uWifi_cannotFetchRouteMAC
    else
      echo "GATEWAY MAC:	$gatewayMac"
    fi
  else
    echo $uWifi_cannotFetchRouteIP
  fi

  if [[ "$gatewayMac" != "" && "$gatewayIp" != "" ]]
  then
    echo $uWifi_permanentlyAssociateHardwareAddresseToHostname
    arp -s "$gatewayIp" "$gatewayMac"
  fi
}

###########################################################
# USERS RELATED ###########################################
###########################################################

function getLoggedInUsers {
  who | cut -f 1 -d ' ' | sort -u
}

function getUsersHomeDirectories {
  echo -e "$1" | while read line
  do
    eval echo ~$line
  done
}

function InitiateUserPreferences {
  mkdir "$1/.uWifi" -p
  mkdir "$1/.uWifi/knownNetworks" -p
  if [ ! -e "$1/.uWifi/preferences" ]
  then
    uWifiInterface=$(echo -e $(ip link | cut -f 2 -d ":" | grep -m 1 wl))
    template="$(cat -v "$basePath/$templatesPath/preferences$langFileName")"
    output=$(eval "echo -e \"$template\"")
    echo -e "$output" > "$1/.uWifi/preferences"
  fi
}

function doesUserPreferencesPathExists {
  userHome=$(eval echo ~$1)
  if [ -e "$userHome/.uWifi/preferences" ]
  then
    echo 1
  else
    echo 0
  fi
}

function getFirstLoggedInUserPreferencesPath {
  getLoggedInUsers | while read line
  do
    answer=$(doesUserPreferencesPathExists "$line")
    if [ "$answer" -eq "1" ]
    then
      echo -e $(eval echo "~$line/.uWifi/preferences")
      break
    fi
  done
}

###########################################################
# GET AVAILABLE WIRELESS NETWORK ##########################
###########################################################

function printNicelyAvailableWirelessNetwork {
  i=1
  if [ -e "/tmp/uWifi/scanOutput" ]
  then
    cat /tmp/uWifi/scanOutput | while read line
    do
      echo -e "$i\t$line"
      i=$((i+1))
    done
  else
    abort "$uWifi_noScanOutputAvailable" 255
  fi
}

function updateAvailableWirelessNetwork {
 while :
  do
    availableWirelessNetwork=$(getAvailableWirelessNetWork "$1")
    sleep 10
  done 
}

function getAvailableWirelessNetWork {
  parser='\
    $1 == "BSS" {
      MAC = substr($2,0,17)
      wifi[MAC]["enc"] = "NONE"
    }
  
    $1 == "SSID:" {
      wifi[MAC]["SSID"] = $2
    }
  
    $1 == "signal:" {
      wifi[MAC]["signal"] = $2
    }
  
    $1 == "WEP:" {
      wifi[MAC]["enc"] = "WEP"
    }
  
    $1 == "WPA:" {
      wifi[MAC]["enc"] = "WPA"
    }
  
    $1 == "RSN:" {
      wifi[MAC]["enc"] = "WPA2"
    }
  
    END {
      for (w in wifi) {
        printf "%s\t%s dBm\t%s\t%s\n",w,wifi[w]["signal"],wifi[w]["enc"],wifi[w]["SSID"]
      }
    }
  '

  ip link set dev "$1" up
  scanOutput=`iw dev "$1" scan | awk "$parser"`
  echo "$scanOutput" | sort --key 2 --reverse --numeric-sort > /tmp/uWifi/scanOutput
}

###########################################################
# DECIDE WHAT TO DO, MAIN CONDITIONAL STRUCTURE ###########
###########################################################


if [ $# -eq "0" ]
then
  abort "$uWifi_nothingToDo" 0
elif [ $1 = "version" ]
then
  echo "uWifi version $uWifiVersion"
elif [ $1 = "addNetwork" ]
then
  InitiateUserPreferences $(eval echo ~$USER) # If necessary

  source $(eval echo "~$USER/.uWifi/preferences")
  
  printNicelyAvailableWirelessNetwork

elif [ $1 = "auto" ]
then
  if [ $USER != "root" ]
  then
    abort "$uWifi_mustBeRoot" 255
  else

    checkIfCommandsExist

    ################################################ ### ## # #  #   #
    # Try first to get a wireless interface
    #
    #

    firstLoggedInUserPreferencesPath=$(getFirstLoggedInUserPreferencesPath) 
    if [ ! -z $firstLoggedInUserPreferencesPath ]
    then
      source $firstLoggedInUserPreferencesPath
    else
      abort "$uWifi_noUserDefinedPreferencesAvailable" 255            #            
    fi                                                                #
                                                                      #  
    #   #  # # ## ### #################################################

    if [ ! -z $uWifiInterface ]
    then 
      mkdir /tmp/uWifi -p
      updateAvailableWirelessNetwork "$uWifiInterface" &
      echo $! > "/tmp/uWifi/updateAvailableWirelessNetwork.pid.$!"
    fi
  fi
elif [ $1 = "stop" ]
then
  if [ $USER != "root" ]
  then
    abort "$uWifi_mustBeRoot" 255
  else
    ls /tmp/uWifi/*.pid.* 2>/dev/null | while read line
    do
      echo "$line"
      kill -9 $(cat "$line")
      rm $line
    done
    rm -rf /tmp/uWifi
  fi
else
  echo "$uWifi_unknownCommand"
fi

